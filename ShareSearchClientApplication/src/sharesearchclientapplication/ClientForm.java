/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sharesearchclientapplication;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JPanel;
import org.me.shares.DatatypeConfigurationException_Exception;
import org.netbeans.xml.schema.sharesschema.Share;
import org.netbeans.xml.schema.sharesschema.Share.SharePrice;
import org.netbeans.xml.schema.usersschema.SharesOwned;
import org.netbeans.xml.schema.usersschema.User;

/**
 *
 * @author n0643521
 */
public class ClientForm extends javax.swing.JFrame {

    private List<Share> shareObjects;
    private List<String> currencyList;
    private List<User> userObjects;
    private List<SharesOwned> sharesOwnedObjects;
        
    /**
     * Creates new form ClientForm
     */
    public ClientForm() {
        initComponents();
        switchPanels(LoginPanel);
        userObjects = getUsers();        
        
        Timer timer = new Timer();
        
        TimerTask task = new TimerTask()
        {
            public void run()
            {                                   
                    shareObjects = displayShares();
                    sharesOwnedObjects = getOwnedShares();
                    
                    checkSearchFilterAndCurrency();   
                    
                    if(searchShareTextField.getText() != "")
                    {
                        fillSearchList(searchShareTextField.getText(), sharesList);   
                    }
                    
                    fillSharesOwnedList();
            }
        };
        
        timer.scheduleAtFixedRate(task, 120000, 120000);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layeredPane = new javax.swing.JLayeredPane();
        RegisterPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        userDetailsRegisterPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        moneyComboBox = new javax.swing.JComboBox<>();
        usernameTextField = new javax.swing.JTextField();
        registerErrorLabel = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        confirmPasswordTextField = new javax.swing.JPasswordField();
        jLabel23 = new javax.swing.JLabel();
        ShareBrokerPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        HighFirstCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        currencyComboBox = new javax.swing.JComboBox<>();
        refreshSharesButton = new javax.swing.JButton();
        filterComboBox = new javax.swing.JComboBox<>();
        shareDetailsPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        shareDetailsEditorPane = new javax.swing.JEditorPane();
        sharesAvailablePanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sharesList = new javax.swing.JList<>();
        sharesOwnedPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sharesOwnedEditorPane = new javax.swing.JEditorPane();
        sellBuyErrorLabel = new javax.swing.JLabel();
        userLoggedInPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        userLogInLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        buyAndSellPanel = new javax.swing.JPanel();
        buyButton = new javax.swing.JButton();
        sellButton = new javax.swing.JButton();
        shareSymbolTextBox = new javax.swing.JTextField();
        amountOfSharesTextBox = new javax.swing.JTextField();
        adminButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        searchShareButton = new javax.swing.JButton();
        searchShareTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        AdminPanel = new javax.swing.JPanel();
        sharesAvailableAdminPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        sharesAdminList = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        addSharePanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        addShareSymbolTextBox = new javax.swing.JTextField();
        addShareButton = new javax.swing.JButton();
        adminBackButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        adminErrorLabel = new javax.swing.JLabel();
        adminUsernamePanel = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        adminLogInLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        shareSelectedTextField = new javax.swing.JTextField();
        deleteShareButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        selectedUserTextField = new javax.swing.JTextField();
        deleteUserButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        giveAdminPermissionButton = new javax.swing.JButton();
        takeAdminPermissionButton = new javax.swing.JButton();
        searchUserTextField = new javax.swing.JTextField();
        searchUserButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        refreshListsButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        searchShareAdminTextField = new javax.swing.JTextField();
        searchSharesAdminButton = new javax.swing.JButton();
        LoginPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameLoginTextField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        registerMenuButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        logOutMessageLabel = new javax.swing.JLabel();
        passwordLoginTextField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(760, 590));
        setMinimumSize(new java.awt.Dimension(620, 530));
        setPreferredSize(new java.awt.Dimension(740, 580));
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        layeredPane.setMaximumSize(new java.awt.Dimension(740, 550));
        layeredPane.setMinimumSize(new java.awt.Dimension(620, 520));
        layeredPane.setName(""); // NOI18N
        layeredPane.setOpaque(true);
        layeredPane.setPreferredSize(new java.awt.Dimension(730, 540));
        layeredPane.setVerifyInputWhenFocusTarget(false);
        layeredPane.setLayout(new java.awt.CardLayout());

        RegisterPanel.setMaximumSize(new java.awt.Dimension(620, 530));
        RegisterPanel.setMinimumSize(new java.awt.Dimension(620, 530));
        RegisterPanel.setPreferredSize(new java.awt.Dimension(578, 495));
        RegisterPanel.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel5.setText("Key in your detais below.");
        RegisterPanel.add(jLabel5);
        jLabel5.setBounds(240, 140, 186, 21);

        registerButton.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });
        RegisterPanel.add(registerButton);
        registerButton.setBounds(390, 390, 90, 30);

        backButton.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        RegisterPanel.add(backButton);
        backButton.setBounds(210, 390, 90, 30);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel14.setText("Registration Form");
        RegisterPanel.add(jLabel14);
        jLabel14.setBounds(240, 100, 215, 29);

        userDetailsRegisterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        userDetailsRegisterPanel.setLayout(null);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Username:");
        userDetailsRegisterPanel.add(jLabel4);
        jLabel4.setBounds(10, 40, 70, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Password:");
        userDetailsRegisterPanel.add(jLabel6);
        jLabel6.setBounds(10, 80, 70, 30);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Money Available (USD):");
        userDetailsRegisterPanel.add(jLabel13);
        jLabel13.setBounds(10, 160, 160, 30);

        moneyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10000", "20000", "30000", "40000", "50000", "60000", "70000", "80000", "90000", "100000" }));
        userDetailsRegisterPanel.add(moneyComboBox);
        moneyComboBox.setBounds(160, 160, 80, 30);
        userDetailsRegisterPanel.add(usernameTextField);
        usernameTextField.setBounds(80, 40, 140, 30);

        registerErrorLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        registerErrorLabel.setForeground(new java.awt.Color(255, 51, 51));
        userDetailsRegisterPanel.add(registerErrorLabel);
        registerErrorLabel.setBounds(16, 16, 230, 30);
        userDetailsRegisterPanel.add(passwordTextField);
        passwordTextField.setBounds(80, 80, 90, 30);
        userDetailsRegisterPanel.add(confirmPasswordTextField);
        confirmPasswordTextField.setBounds(130, 120, 90, 30);

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("Confirm Password:");
        userDetailsRegisterPanel.add(jLabel23);
        jLabel23.setBounds(10, 120, 130, 30);

        RegisterPanel.add(userDetailsRegisterPanel);
        userDetailsRegisterPanel.setBounds(210, 170, 270, 210);

        layeredPane.add(RegisterPanel, "card3");

        ShareBrokerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ShareBrokerPanel.setMaximumSize(new java.awt.Dimension(730, 530));
        ShareBrokerPanel.setMinimumSize(new java.awt.Dimension(710, 510));
        ShareBrokerPanel.setName(""); // NOI18N
        ShareBrokerPanel.setPreferredSize(new java.awt.Dimension(730, 520));
        ShareBrokerPanel.setLayout(null);

        jLabel7.setText("Filter by:");
        ShareBrokerPanel.add(jLabel7);
        jLabel7.setBounds(420, 90, 80, 20);

        HighFirstCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        HighFirstCheckBox.setText("Highest First");
        HighFirstCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HighFirstCheckBoxActionPerformed(evt);
            }
        });
        ShareBrokerPanel.add(HighFirstCheckBox);
        HighFirstCheckBox.setBounds(620, 90, 100, 20);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Share Brokering Service");
        jLabel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ShareBrokerPanel.add(jLabel8);
        jLabel8.setBounds(10, 10, 260, 60);

        jLabel9.setText("Default currency:");
        ShareBrokerPanel.add(jLabel9);
        jLabel9.setBounds(420, 60, 110, 20);

        currencyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default" }));
        currencyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyComboBoxActionPerformed(evt);
            }
        });
        ShareBrokerPanel.add(currencyComboBox);
        currencyComboBox.setBounds(520, 50, 190, 30);

        refreshSharesButton.setText("Refresh Shares");
        refreshSharesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshSharesButtonActionPerformed(evt);
            }
        });
        ShareBrokerPanel.add(refreshSharesButton);
        refreshSharesButton.setBounds(420, 290, 120, 40);

        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Company Name", "Share Symbol", "Price" }));
        filterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboBoxActionPerformed(evt);
            }
        });
        ShareBrokerPanel.add(filterComboBox);
        filterComboBox.setBounds(470, 80, 140, 30);

        shareDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Share Details"));

        shareDetailsEditorPane.setEditable(false);
        shareDetailsEditorPane.setAutoscrolls(false);
        jScrollPane7.setViewportView(shareDetailsEditorPane);

        javax.swing.GroupLayout shareDetailsPanelLayout = new javax.swing.GroupLayout(shareDetailsPanel);
        shareDetailsPanel.setLayout(shareDetailsPanelLayout);
        shareDetailsPanelLayout.setHorizontalGroup(
            shareDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shareDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addContainerGap())
        );
        shareDetailsPanelLayout.setVerticalGroup(
            shareDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
        );

        ShareBrokerPanel.add(shareDetailsPanel);
        shareDetailsPanel.setBounds(10, 340, 330, 200);

        sharesAvailablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shares Available"));
        sharesAvailablePanel.setPreferredSize(new java.awt.Dimension(303, 244));
        sharesAvailablePanel.setRequestFocusEnabled(false);

        sharesList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sharesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sharesListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(sharesList);

        javax.swing.GroupLayout sharesAvailablePanelLayout = new javax.swing.GroupLayout(sharesAvailablePanel);
        sharesAvailablePanel.setLayout(sharesAvailablePanelLayout);
        sharesAvailablePanelLayout.setHorizontalGroup(
            sharesAvailablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sharesAvailablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addContainerGap())
        );
        sharesAvailablePanelLayout.setVerticalGroup(
            sharesAvailablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
        );

        ShareBrokerPanel.add(sharesAvailablePanel);
        sharesAvailablePanel.setBounds(10, 120, 400, 220);

        sharesOwnedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shares Owned"));

        sharesOwnedEditorPane.setEditable(false);
        jScrollPane2.setViewportView(sharesOwnedEditorPane);

        javax.swing.GroupLayout sharesOwnedPanelLayout = new javax.swing.GroupLayout(sharesOwnedPanel);
        sharesOwnedPanel.setLayout(sharesOwnedPanelLayout);
        sharesOwnedPanelLayout.setHorizontalGroup(
            sharesOwnedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sharesOwnedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addContainerGap())
        );
        sharesOwnedPanelLayout.setVerticalGroup(
            sharesOwnedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
        );

        ShareBrokerPanel.add(sharesOwnedPanel);
        sharesOwnedPanel.setBounds(340, 340, 380, 200);

        sellBuyErrorLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sellBuyErrorLabel.setForeground(new java.awt.Color(255, 0, 0));
        ShareBrokerPanel.add(sellBuyErrorLabel);
        sellBuyErrorLabel.setBounds(420, 240, 300, 30);

        userLoggedInPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel10.setText("Currently logged in:");

        userLogInLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        userLogInLabel.setText("UserName");

        jLabel11.setText("Balance:");

        balanceLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        balanceLabel.setText("Balance");

        javax.swing.GroupLayout userLoggedInPanelLayout = new javax.swing.GroupLayout(userLoggedInPanel);
        userLoggedInPanel.setLayout(userLoggedInPanelLayout);
        userLoggedInPanelLayout.setHorizontalGroup(
            userLoggedInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userLoggedInPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userLogInLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balanceLabel)
                .addGap(8, 8, 8))
        );
        userLoggedInPanelLayout.setVerticalGroup(
            userLoggedInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userLoggedInPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel10)
                .addComponent(userLogInLabel)
                .addComponent(jLabel11)
                .addComponent(balanceLabel))
        );

        ShareBrokerPanel.add(userLoggedInPanel);
        userLoggedInPanel.setBounds(270, 10, 330, 40);

        buyAndSellPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Buy & Sell"));

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        sellButton.setText("Sell");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        shareSymbolTextBox.setEditable(false);

        amountOfSharesTextBox.setText("Amount");
        amountOfSharesTextBox.setToolTipText("Amount");
        amountOfSharesTextBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                amountOfSharesTextBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                amountOfSharesTextBoxFocusLost(evt);
            }
        });

        javax.swing.GroupLayout buyAndSellPanelLayout = new javax.swing.GroupLayout(buyAndSellPanel);
        buyAndSellPanel.setLayout(buyAndSellPanelLayout);
        buyAndSellPanelLayout.setHorizontalGroup(
            buyAndSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyAndSellPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buyAndSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyAndSellPanelLayout.createSequentialGroup()
                        .addComponent(shareSymbolTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(amountOfSharesTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buyAndSellPanelLayout.createSequentialGroup()
                        .addComponent(sellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buyAndSellPanelLayout.setVerticalGroup(
            buyAndSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyAndSellPanelLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(buyAndSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shareSymbolTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amountOfSharesTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buyAndSellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sellButton)
                    .addComponent(buyButton)))
        );

        ShareBrokerPanel.add(buyAndSellPanel);
        buyAndSellPanel.setBounds(420, 120, 170, 110);

        adminButton.setText("Admin Screen");
        adminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminButtonActionPerformed(evt);
            }
        });
        ShareBrokerPanel.add(adminButton);
        adminButton.setBounds(600, 290, 120, 40);

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });
        ShareBrokerPanel.add(logOutButton);
        logOutButton.setBounds(640, 10, 80, 30);

        searchShareButton.setText("Search");
        searchShareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchShareButtonActionPerformed(evt);
            }
        });
        ShareBrokerPanel.add(searchShareButton);
        searchShareButton.setBounds(190, 90, 80, 30);
        ShareBrokerPanel.add(searchShareTextField);
        searchShareTextField.setBounds(10, 90, 180, 30);

        jLabel17.setText("Search Share List");
        ShareBrokerPanel.add(jLabel17);
        jLabel17.setBounds(10, 70, 130, 16);

        layeredPane.add(ShareBrokerPanel, "card2");

        AdminPanel.setMaximumSize(new java.awt.Dimension(640, 530));
        AdminPanel.setMinimumSize(new java.awt.Dimension(640, 530));
        AdminPanel.setName(""); // NOI18N
        AdminPanel.setPreferredSize(new java.awt.Dimension(640, 530));
        AdminPanel.setLayout(null);

        sharesAvailableAdminPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shares Available"));

        sharesAdminList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sharesAdminList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sharesAdminListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(sharesAdminList);

        javax.swing.GroupLayout sharesAvailableAdminPanelLayout = new javax.swing.GroupLayout(sharesAvailableAdminPanel);
        sharesAvailableAdminPanel.setLayout(sharesAvailableAdminPanelLayout);
        sharesAvailableAdminPanelLayout.setHorizontalGroup(
            sharesAvailableAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sharesAvailableAdminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );
        sharesAvailableAdminPanelLayout.setVerticalGroup(
            sharesAvailableAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
        );

        AdminPanel.add(sharesAvailableAdminPanel);
        sharesAvailableAdminPanel.setBounds(10, 90, 410, 252);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Manipulating Share & User Records ");
        jLabel12.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        AdminPanel.add(jLabel12);
        jLabel12.setBounds(10, 10, 360, 60);

        addSharePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Adding a Share"));

        jLabel16.setText("Share Symbol:");

        addShareButton.setText("Add Share");
        addShareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addShareButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addSharePanelLayout = new javax.swing.GroupLayout(addSharePanel);
        addSharePanel.setLayout(addSharePanelLayout);
        addSharePanelLayout.setHorizontalGroup(
            addSharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSharePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addShareSymbolTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addShareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        addSharePanelLayout.setVerticalGroup(
            addSharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSharePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addSharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(addShareSymbolTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addShareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AdminPanel.add(addSharePanel);
        addSharePanel.setBounds(420, 180, 310, 80);

        adminBackButton.setText("Back");
        adminBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminBackButtonActionPerformed(evt);
            }
        });
        AdminPanel.add(adminBackButton);
        adminBackButton.setBounds(650, 10, 70, 30);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Users"));

        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(userList);

        jScrollPane3.setViewportView(jScrollPane4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
        );

        AdminPanel.add(jPanel1);
        jPanel1.setBounds(10, 340, 380, 200);

        adminErrorLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        adminErrorLabel.setForeground(new java.awt.Color(255, 51, 51));
        AdminPanel.add(adminErrorLabel);
        adminErrorLabel.setBounds(380, 60, 240, 30);

        adminUsernamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel22.setText("Currently logged in:");

        adminLogInLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        adminLogInLabel.setText("UserName");

        javax.swing.GroupLayout adminUsernamePanelLayout = new javax.swing.GroupLayout(adminUsernamePanel);
        adminUsernamePanel.setLayout(adminUsernamePanelLayout);
        adminUsernamePanelLayout.setHorizontalGroup(
            adminUsernamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminUsernamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminLogInLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(65, 65, 65))
        );
        adminUsernamePanelLayout.setVerticalGroup(
            adminUsernamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminUsernamePanelLayout.createSequentialGroup()
                .addGroup(adminUsernamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adminLogInLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        AdminPanel.add(adminUsernamePanel);
        adminUsernamePanel.setBounds(390, 10, 250, 40);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Removing a Share"));

        shareSelectedTextField.setText("Selected Share");
        shareSelectedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                shareSelectedTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                shareSelectedTextFieldFocusLost(evt);
            }
        });

        deleteShareButton.setText("Delete Share");
        deleteShareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteShareButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shareSelectedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteShareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shareSelectedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteShareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AdminPanel.add(jPanel2);
        jPanel2.setBounds(420, 90, 310, 80);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Users"));

        selectedUserTextField.setEditable(false);

        deleteUserButton.setText("Delete");
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        jLabel21.setText("Selected User");

        giveAdminPermissionButton.setText("Give Admin Permissions");
        giveAdminPermissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giveAdminPermissionButtonActionPerformed(evt);
            }
        });

        takeAdminPermissionButton.setText("Take Admin Permissions");
        takeAdminPermissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeAdminPermissionButtonActionPerformed(evt);
            }
        });

        searchUserButton.setText("Search");
        searchUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Search User List");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(selectedUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(giveAdminPermissionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(deleteUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(takeAdminPermissionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(searchUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchUserButton))
                    .addComponent(jLabel15))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(giveAdminPermissionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(takeAdminPermissionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchUserTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        AdminPanel.add(jPanel3);
        jPanel3.setBounds(420, 340, 310, 200);

        refreshListsButton.setText("Refresh Lists");
        refreshListsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshListsButtonActionPerformed(evt);
            }
        });
        AdminPanel.add(refreshListsButton);
        refreshListsButton.setBounds(600, 60, 120, 30);
        refreshListsButton.getAccessibleContext().setAccessibleDescription("");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Shares"));

        searchSharesAdminButton.setText("Search");
        searchSharesAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSharesAdminButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchShareAdminTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchSharesAdminButton)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchShareAdminTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchSharesAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        AdminPanel.add(jPanel4);
        jPanel4.setBounds(420, 270, 310, 70);

        layeredPane.add(AdminPanel, "card5");

        LoginPanel.setMaximumSize(new java.awt.Dimension(600, 500));
        LoginPanel.setMinimumSize(new java.awt.Dimension(600, 500));
        LoginPanel.setPreferredSize(new java.awt.Dimension(600, 500));
        LoginPanel.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Welcome to the Share Trader");
        jLabel1.setAutoscrolls(true);
        LoginPanel.add(jLabel1);
        jLabel1.setBounds(200, 150, 316, 29);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setText("Password:");
        jLabel3.setAutoscrolls(true);
        LoginPanel.add(jLabel3);
        jLabel3.setBounds(270, 260, 80, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("Username:");
        jLabel2.setAutoscrolls(true);
        LoginPanel.add(jLabel2);
        jLabel2.setBounds(270, 220, 80, 30);
        LoginPanel.add(usernameLoginTextField);
        usernameLoginTextField.setBounds(350, 220, 80, 30);

        loginButton.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        loginButton.setText("Login");
        loginButton.setAutoscrolls(true);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        LoginPanel.add(loginButton);
        loginButton.setBounds(310, 300, 100, 30);

        registerMenuButton.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        registerMenuButton.setText("Register");
        registerMenuButton.setAutoscrolls(true);
        registerMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerMenuButtonActionPerformed(evt);
            }
        });
        LoginPanel.add(registerMenuButton);
        registerMenuButton.setBounds(310, 340, 100, 30);

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        LoginPanel.add(errorLabel);
        errorLabel.setBounds(250, 180, 240, 30);

        exitButton.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        exitButton.setText("Exit");
        exitButton.setAutoscrolls(true);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        LoginPanel.add(exitButton);
        exitButton.setBounds(310, 380, 100, 30);
        LoginPanel.add(logOutMessageLabel);
        logOutMessageLabel.setBounds(10, 10, 140, 30);
        LoginPanel.add(passwordLoginTextField);
        passwordLoginTextField.setBounds(350, 260, 80, 30);

        layeredPane.add(LoginPanel, "card2");

        getContentPane().add(layeredPane, "card3");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void currencyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyComboBoxActionPerformed
        //Check which filter or a currency was selected and sort the elements depending on the filter
        checkSearchFilterAndCurrency();
              
        if(searchShareTextField.getText() != "")
        {
            fillSearchList(searchShareTextField.getText(), sharesList);
        }
    }//GEN-LAST:event_currencyComboBoxActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        sellBuyErrorLabel.setText("");
                
        int amount = 0;
        
        try{
            amount = Integer.parseInt(amountOfSharesTextBox.getText());
        }
        catch (Exception e)
        {
            sellBuyErrorLabel.setText("Error: Enter a valid amount.");
        }
        
        int zeroIndex = amountOfSharesTextBox.getText().indexOf('0');
        
        //Checking for user errors
        if(amountOfSharesTextBox.getText().contains("-"))
        {
            sellBuyErrorLabel.setText("Error: Enter a valid amount.");
        }
        else if(zeroIndex == 0)            
        {
            sellBuyErrorLabel.setText("Error: Enter a valid amount.");
        }
        else if(sellBuyErrorLabel.getText().equals(""))
        {
            double sharePrice = getShareValue();        
            updateOwnedSharesBuyClient(shareSymbolTextBox.getText(), amount, sharePrice);

            if(sellBuyErrorLabel.getText().equals(""))
            {
                buyShares(shareSymbolTextBox.getText(), amount);

                shareObjects = displayShares();
                fillShareList(sharesList);

                //Refreshing the text boxes and text area
                shareDetailsEditorPane.setText("");
                shareSymbolTextBox.setText("");
                amountOfSharesTextBox.setText("");
            }
        }
        
    }//GEN-LAST:event_buyButtonActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        int amount = 0;
        
        try{
            amount = Integer.parseInt(amountOfSharesTextBox.getText());
        }
        catch (Exception e)
        {
            sellBuyErrorLabel.setText("Error: Enter a valid amount.");
        }
        
        //Checking for user errors
        if(amountOfSharesTextBox.getText().contains("-"))
        {
            sellBuyErrorLabel.setText("Error: Enter a valid amount.");
        }
        else if(amount == 0)            
        {
            sellBuyErrorLabel.setText("Error: Enter a valid amount.");
        }
        else if(sellBuyErrorLabel.getText().equals(""))
        {        
            double sharePrice = getShareValue();
            updateOwnedSharesSellClient(shareSymbolTextBox.getText(), amount, sharePrice);

            if(sellBuyErrorLabel.getText().equals(""))
            {
                sellShares(shareSymbolTextBox.getText(), amount);

                shareObjects = displayShares();
                fillShareList(sharesList);

                //Refreshing the text boxes and text area
                shareDetailsEditorPane.setText("");
                shareSymbolTextBox.setText("");
                amountOfSharesTextBox.setText("");
            }
        }
    }//GEN-LAST:event_sellButtonActionPerformed

    private void refreshSharesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshSharesButtonActionPerformed

        //Update the share list
        shareObjects = displayShares();

        //Convert updated price to the chosen currecy if any selected and apply filters if any selected
        if(currencyComboBox.getSelectedItem() != "Default" && filterComboBox.getSelectedItem().equals("Default"))
        {
            String currencySymbol = getCurrencySymbol(currencyComboBox.getSelectedItem().toString());
            fillShareConvertedCurrencyList(currencySymbol);
        }
        else if(filterComboBox.getSelectedItem() != "Default")
        {
            setFilter();
        }
        else
        {
            //Fill the share table with the updates shares
            fillShareList(sharesList);
        }
        
        fillSharesOwnedList();
        
        shareDetailsEditorPane.setText("");
        searchShareTextField.setText("");
        
    }//GEN-LAST:event_refreshSharesButtonActionPerformed

    private void registerMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerMenuButtonActionPerformed
        switchPanels(RegisterPanel);
        
        //Clear registration text boxes
        usernameTextField.setText("");
        passwordTextField.setText("");
        confirmPasswordTextField.setText("");
        registerErrorLabel.setText("");
    }//GEN-LAST:event_registerMenuButtonActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        
        //Variable to check if the user is present
        boolean present = false;
        
        User nextUser = new User();
            Iterator itr = userObjects.iterator();
            while(itr.hasNext()) {
                nextUser = (User) itr.next();
                if(nextUser.getUserName().equals(usernameTextField.getText())) {
                    present = true;
                    break;

                }
            }
            
            //Convert the array of characters to a string so that it can be compared.
            char[] charPassword = passwordTextField.getPassword();
            String password = new String(charPassword);     
            
            char[] charConfirmPassword = confirmPasswordTextField.getPassword();
            String confirmPassword = new String(charConfirmPassword);  
            
            if(usernameTextField.equals("") || password.equals("") || confirmPassword.equals(""))
            {
                registerErrorLabel.setText("Error: Some fields are empty.");
            }
            else
            {
                if(present)
                {
                    registerErrorLabel.setText("Error: Username already exists.");   
                }
                else if(usernameTextField.getText().contains("-"))
                {
                    registerErrorLabel.setText("Error: Enter a valid username.");
                }
                else if(password.equals(confirmPassword))
                {
                    registerUser(Double.parseDouble(moneyComboBox.getSelectedItem().toString()), "USD", usernameTextField.getText(), passwordTextField.getText());

                    userObjects = getUsers();

                    switchPanels(LoginPanel);    

                    logOutMessageLabel.setText("Registered Successfully");
                }
                else
                {
                    registerErrorLabel.setText("Error: Passwords do not match.");
                }   
            }

    }//GEN-LAST:event_registerButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        switchPanels(LoginPanel);
        
        //Clear log in page text boxes
        errorLabel.setText("");
        usernameLoginTextField.setText("");
        passwordLoginTextField.setText("");
        logOutMessageLabel.setText("");
    }//GEN-LAST:event_backButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        
        char[] charPassword = passwordLoginTextField.getPassword();  
        String password = new String(charPassword);
        
        User nextUser = new User();
            Iterator itr = userObjects.iterator();
            while(itr.hasNext()) {
                nextUser = (User) itr.next();
                if(nextUser.getUserName().equals(usernameLoginTextField.getText()) && nextUser.getUserPassword().equals(password)) {
                    switchPanels(ShareBrokerPanel);

                    shareObjects = displayShares();
                    currencyList = getCurrencyCodes();
                    
                    sharesOwnedObjects = getOwnedShares();

                    HighFirstCheckBox.setEnabled(false);
                    fillShareList(sharesList);

                    fillCurrencyComboBox(); 
                    
                    userLogInLabel.setText(usernameLoginTextField.getText());
                    balanceLabel.setText("USD " + Double.toString(nextUser.getUserMoney().getValue()));
                    fillSharesOwnedList();
                    
                    //Hide or show admin button depending if the logged in user is admin
                    if(nextUser.isIsAdmin())
                    {
                        adminButton.setVisible(true);
                    }
                    else
                    {
                        adminButton.setVisible(false);
                    }
                    
                    
                    
                    break;
                }
            }
            errorLabel.setText("Username or password is incorrect.");
        
    }//GEN-LAST:event_loginButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void adminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminButtonActionPerformed
        String adminUserName = userLogInLabel.getText();
        
        switchPanels(AdminPanel);
        adminLogInLabel.setText(adminUserName);
        fillShareList(sharesAdminList);
        fillUserList();
        
        
    }//GEN-LAST:event_adminButtonActionPerformed

    private void addShareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addShareButtonActionPerformed
        String confirmationMessage = "";
        
        if(addShareSymbolTextBox.getText().equals(""))
        {
            adminErrorLabel.setText("Share symbol not selected.");
        }
        else
        {
            try {
                confirmationMessage = addShare(addShareSymbolTextBox.getText());
            } catch (DatatypeConfigurationException_Exception ex) {
                Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            if(confirmationMessage.equals("completed"))
            {
                shareObjects = displayShares();
                fillShareList(sharesAdminList);

                //Clear share symbol boxe after adding is done
                addShareSymbolTextBox.setText("");   
            }
            else if(confirmationMessage.equals("already exists"))
            {
                adminErrorLabel.setText("Share being added already exists.");
            }
            else
            {
                adminErrorLabel.setText("Share being added does not exist.");
            }
        }
  
        
    }//GEN-LAST:event_addShareButtonActionPerformed

    private void deleteShareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteShareButtonActionPerformed
        if(shareSelectedTextField.getText() != "")
        {
            boolean usersOwn = false;
            
            SharesOwned nextOwnedShare = new SharesOwned();
            Iterator itr = sharesOwnedObjects.iterator();
            while(itr.hasNext()) {
                nextOwnedShare = (SharesOwned) itr.next();
                if(nextOwnedShare.getShareSymbol().equals(shareSelectedTextField.getText()))
                {
                    usersOwn = true;
                    break;
                }
            }
            
            if(usersOwn == true)
            {
                shareDeletedReturnMoney(shareSelectedTextField.getText());
            }
            
            
            removeShare(shareSelectedTextField.getText());
            shareObjects = displayShares();
            fillShareList(sharesAdminList);
            shareSelectedTextField.setText("");
        }
        else
        {
            adminErrorLabel.setText("No share has been selected.");
        }
    }//GEN-LAST:event_deleteShareButtonActionPerformed

    private void adminBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminBackButtonActionPerformed
        
        User nextUser = new User();
            Iterator itr = userObjects.iterator();
            while(itr.hasNext()) {
                nextUser = (User) itr.next();
                if(nextUser.getUserName().equals("Admin")) {
                    switchPanels(ShareBrokerPanel);

                    shareObjects = displayShares();
                    currencyList = getCurrencyCodes();
                    
                    sharesOwnedObjects = getOwnedShares(); 
                    
                    HighFirstCheckBox.setEnabled(false);
                    fillShareList(sharesList);

                    fillCurrencyComboBox(); 
                    
                    userLogInLabel.setText(usernameLoginTextField.getText());
                    balanceLabel.setText("USD " + Double.toString(nextUser.getUserMoney().getValue()));
                    fillSharesOwnedList();
                    
                    adminButton.setVisible(true);
                    
                    selectedUserTextField.setText("");
                    searchUserTextField.setText("");
                    searchShareAdminTextField.setText("");

                    break;
                }
            }
    }//GEN-LAST:event_adminBackButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        switchPanels(LoginPanel);
        
        shareSymbolTextBox.setText("");
        amountOfSharesTextBox.setText("Amount");
        
        usernameLoginTextField.setText("");
        passwordLoginTextField.setText("");
        errorLabel.setText("");
        sellBuyErrorLabel.setText("");
        logOutMessageLabel.setText("Logout Succesful.");
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        if(selectedUserTextField.getText() != "")
        {
            SharesOwned nextSharesOwned = new SharesOwned();
            Iterator itr = sharesOwnedObjects.iterator();            
            while(itr.hasNext()) {
                nextSharesOwned = (SharesOwned) itr.next();
                if(nextSharesOwned.getUserNameOwned().equals(selectedUserTextField.getText())) {
            
                    sellShares(nextSharesOwned.getShareSymbol(), nextSharesOwned.getAmount());
                }
            }
            
            removeUser(selectedUserTextField.getText());
            userObjects = getUsers();
            fillUserList();
            selectedUserTextField.setText("");                       
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void HighFirstCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HighFirstCheckBoxActionPerformed
        setFilter();
    }//GEN-LAST:event_HighFirstCheckBoxActionPerformed

    private void filterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboBoxActionPerformed
        HighFirstCheckBox.setSelected(false);

        //Check which filter or a currency was selected and sort the elements depending on the filter
        checkSearchFilterAndCurrency();
        
        if(searchShareTextField.getText() != "")
        {
            fillSearchList(searchShareTextField.getText(), sharesList);
        }
    }//GEN-LAST:event_filterComboBoxActionPerformed

    private void giveAdminPermissionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giveAdminPermissionButtonActionPerformed
        userObjects = getUsers();
        giveAdminPermission(selectedUserTextField.getText(), true);
        
        userObjects = getUsers();
        fillUserList();
        
        selectedUserTextField.setText("");
    }//GEN-LAST:event_giveAdminPermissionButtonActionPerformed

    private void takeAdminPermissionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeAdminPermissionButtonActionPerformed
        userObjects = getUsers();
        giveAdminPermission(selectedUserTextField.getText(), false);
        
        userObjects = getUsers();
        fillUserList();

        selectedUserTextField.setText("");
    }//GEN-LAST:event_takeAdminPermissionButtonActionPerformed

    private void searchShareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchShareButtonActionPerformed
        
        if(filterComboBox.getSelectedItem().equals("Default"))
        {
            if(currencyComboBox.getSelectedItem().equals("Default"))
            {
                fillShareList(sharesList);
            }
            else
            {
                fillProgramShareListConvertedCurrency(currencyComboBox.getSelectedItem().toString());
                fillShareList(sharesList);
            }
        }
        else
        {
            setFilter();
        }
        fillSearchList(searchShareTextField.getText(), sharesList);      
        
        shareObjects = displayShares();
    }//GEN-LAST:event_searchShareButtonActionPerformed

    private void searchUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserButtonActionPerformed
        fillUserList();
        
        fillSearchList(searchUserTextField.getText(), userList);   
    }//GEN-LAST:event_searchUserButtonActionPerformed

    private void searchSharesAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSharesAdminButtonActionPerformed
        fillShareList(sharesAdminList);
        
        fillSearchList(searchShareAdminTextField.getText(), sharesAdminList);   
    }//GEN-LAST:event_searchSharesAdminButtonActionPerformed

    private void refreshListsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshListsButtonActionPerformed
        searchUserTextField.setText("");
        searchShareAdminTextField.setText(""); 
        shareSelectedTextField.setText("");
        addShareSymbolTextBox.setText("");
        selectedUserTextField.setText("");
        adminErrorLabel.setText("");
        
        userObjects = getUsers();
        shareObjects = displayShares();
        
        fillShareList(sharesAdminList);
        fillUserList();
    }//GEN-LAST:event_refreshListsButtonActionPerformed

    private void sharesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sharesListValueChanged
        if (sharesList.getSelectedValue() != null) {
        
            String shareSymbol = getShareSymbol(sharesList.getSelectedValue());
            shareSymbolTextBox.setText(shareSymbol);
            fillShareDetailsTextArea(shareSymbol);
        }
    }//GEN-LAST:event_sharesListValueChanged

    private void sharesAdminListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sharesAdminListValueChanged
        String shareSymbol = getShareSymbol(sharesAdminList.getSelectedValue());
        shareSelectedTextField.setText(shareSymbol);    
    }//GEN-LAST:event_sharesAdminListValueChanged

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        
        selectedUserTextField.setText("");
                
        if(userList.getSelectedValue().indexOf('-') != -1)
        {
            selectedUserTextField.setText(getAdminNameFromString(userList.getSelectedValue()));
        }
        else
        {
            selectedUserTextField.setText(userList.getSelectedValue());
        }
    }//GEN-LAST:event_userListValueChanged

    private void amountOfSharesTextBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_amountOfSharesTextBoxFocusGained
        amountOfSharesTextBox.setText("");
    }//GEN-LAST:event_amountOfSharesTextBoxFocusGained

    private void amountOfSharesTextBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_amountOfSharesTextBoxFocusLost
        if(amountOfSharesTextBox.getText().equals(""))
        {
        amountOfSharesTextBox.setText("Amount");
        }
    }//GEN-LAST:event_amountOfSharesTextBoxFocusLost

    private void shareSelectedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_shareSelectedTextFieldFocusGained
        shareSelectedTextField.setText("");
    }//GEN-LAST:event_shareSelectedTextFieldFocusGained

    private void shareSelectedTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_shareSelectedTextFieldFocusLost
        if(shareSelectedTextField.getText().equals(""))
        {
        shareSelectedTextField.setText("Selected Share");
        }
    }//GEN-LAST:event_shareSelectedTextFieldFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientForm().setVisible(true);               
            }
        });

        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdminPanel;
    private javax.swing.JCheckBox HighFirstCheckBox;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JPanel RegisterPanel;
    private javax.swing.JPanel ShareBrokerPanel;
    private javax.swing.JButton addShareButton;
    private javax.swing.JPanel addSharePanel;
    private javax.swing.JTextField addShareSymbolTextBox;
    private javax.swing.JButton adminBackButton;
    private javax.swing.JButton adminButton;
    private javax.swing.JLabel adminErrorLabel;
    private javax.swing.JLabel adminLogInLabel;
    private javax.swing.JPanel adminUsernamePanel;
    private javax.swing.JTextField amountOfSharesTextBox;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JPanel buyAndSellPanel;
    private javax.swing.JButton buyButton;
    private javax.swing.JPasswordField confirmPasswordTextField;
    private javax.swing.JComboBox<String> currencyComboBox;
    private javax.swing.JButton deleteShareButton;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JButton giveAdminPermissionButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JButton logOutButton;
    private javax.swing.JLabel logOutMessageLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JComboBox<String> moneyComboBox;
    private javax.swing.JPasswordField passwordLoginTextField;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton refreshListsButton;
    private javax.swing.JButton refreshSharesButton;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel registerErrorLabel;
    private javax.swing.JButton registerMenuButton;
    private javax.swing.JTextField searchShareAdminTextField;
    private javax.swing.JButton searchShareButton;
    private javax.swing.JTextField searchShareTextField;
    private javax.swing.JButton searchSharesAdminButton;
    private javax.swing.JButton searchUserButton;
    private javax.swing.JTextField searchUserTextField;
    private javax.swing.JTextField selectedUserTextField;
    private javax.swing.JButton sellButton;
    private javax.swing.JLabel sellBuyErrorLabel;
    private javax.swing.JEditorPane shareDetailsEditorPane;
    private javax.swing.JPanel shareDetailsPanel;
    private javax.swing.JTextField shareSelectedTextField;
    private javax.swing.JTextField shareSymbolTextBox;
    private javax.swing.JList<String> sharesAdminList;
    private javax.swing.JPanel sharesAvailableAdminPanel;
    private javax.swing.JPanel sharesAvailablePanel;
    private javax.swing.JList<String> sharesList;
    private javax.swing.JEditorPane sharesOwnedEditorPane;
    private javax.swing.JPanel sharesOwnedPanel;
    private javax.swing.JButton takeAdminPermissionButton;
    private javax.swing.JPanel userDetailsRegisterPanel;
    private javax.swing.JList<String> userList;
    private javax.swing.JLabel userLogInLabel;
    private javax.swing.JPanel userLoggedInPanel;
    private javax.swing.JTextField usernameLoginTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

    private static java.util.List<org.netbeans.xml.schema.sharesschema.Share> displayShares() {
        org.me.shares.ShareSearch_Service service = new org.me.shares.ShareSearch_Service();
        org.me.shares.ShareSearch port = service.getShareSearchPort();
        return port.displayShares();
    }

    private static String buyShares(java.lang.String shareSymbol, int amountOfShares) {
        org.me.shares.ShareSearch_Service service = new org.me.shares.ShareSearch_Service();
        org.me.shares.ShareSearch port = service.getShareSearchPort();
        return port.buyShares(shareSymbol, amountOfShares);
    }

    private static String sellShares(java.lang.String shareSymbol, int amountOfShares) {
        org.me.shares.ShareSearch_Service service = new org.me.shares.ShareSearch_Service();
        org.me.shares.ShareSearch port = service.getShareSearchPort();
        return port.sellShares(shareSymbol, amountOfShares);
    }
    
    private static double getConversionRate(java.lang.String arg0, java.lang.String arg1) {
        docwebservices.CurrencyConversionWSService service = new docwebservices.CurrencyConversionWSService();
        docwebservices.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getConversionRate(arg0, arg1);
    }

    private static java.util.List<java.lang.String> getCurrencyCodes() {
        docwebservices.CurrencyConversionWSService service = new docwebservices.CurrencyConversionWSService();
        docwebservices.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getCurrencyCodes();
    }
    
    private static String addShare(java.lang.String companySymbol) throws DatatypeConfigurationException_Exception {
        org.me.shares.ShareSearch_Service service = new org.me.shares.ShareSearch_Service();
        org.me.shares.ShareSearch port = service.getShareSearchPort();
        return port.addShare(companySymbol);
    }

    private static String removeShare(java.lang.String shareSymbol) {
        org.me.shares.ShareSearch_Service service = new org.me.shares.ShareSearch_Service();
        org.me.shares.ShareSearch port = service.getShareSearchPort();
        return port.removeShare(shareSymbol);
    }
    
    private static java.util.List<org.netbeans.xml.schema.usersschema.SharesOwned> getOwnedShares() {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.getOwnedShares();
    }

    private static java.util.List<org.netbeans.xml.schema.usersschema.User> getUsers() {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.getUsers();
    }

    private static String registerUser(double moneyValue, java.lang.String moneyCurrency, java.lang.String userName, java.lang.String userPassword) {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.registerUser(moneyValue, moneyCurrency, userName, userPassword);
    }

    private static String removeUser(java.lang.String userName) {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.removeUser(userName);
    }    
    
    private static String updateOwnedSharesBuy(java.lang.String userName, java.lang.String shareSymbol, int amountOfShares, double sharePrice) {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.updateOwnedSharesBuy(userName, shareSymbol, amountOfShares, sharePrice);
    }
    
    private static String updateOwnedSharesSell(java.lang.String userName, java.lang.String shareSymbol, int amountOfShares, double sharePrice) {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.updateOwnedSharesSell(userName, shareSymbol, amountOfShares, sharePrice);
    }
   
    private static String giveAdminPermission(java.lang.String userName, boolean adminPermission) {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.giveAdminPermission(userName, adminPermission);
    }    
    
    private static String shareDeletedReturnMoney(java.lang.String shareSymbol) {
        users.UserSearch_Service service = new users.UserSearch_Service();
        users.UserSearch port = service.getUserSearchPort();
        return port.shareDeletedReturnMoney(shareSymbol);
    }
    
    public void switchPanels(JPanel panel)
    {
        layeredPane.removeAll();
        layeredPane.add(panel);
        layeredPane.repaint();
        layeredPane.revalidate();
        
        
    }
    
    //Fill share list with the main details of each share
    private void fillShareList(JList<String> listName)
    {
        DefaultListModel dlm = new DefaultListModel();
        try {
            Share nextShare = new Share();
            Iterator itr = shareObjects.iterator();
            
            while(itr.hasNext()) {
                nextShare = (Share) itr.next();

                dlm.addElement(nextShare.getCompanyName() + " @ " + nextShare.getCompanySymbol() + " @ " + " Price "+ nextShare.getSharePrice().getCurrency()+ ": " + nextShare.getSharePrice().getValue());                
            }     

        } catch (Exception ex) {
            System.out.println("Exception: " + ex);
        }
        
        listName.setModel(dlm);                
    }
    
    //Fill shares owned with the shares by the user currently logged in
    private void fillSharesOwnedList()
    {
        sharesOwnedEditorPane.setContentType("text/html"); 
        sharesOwnedEditorPane.setText("");
               
        try {            
            SharesOwned nextShareOwned = new SharesOwned();                
            Iterator itrOwnedShare = sharesOwnedObjects.iterator();

            String text = "";
            
            while(itrOwnedShare.hasNext()) {
                nextShareOwned = (SharesOwned) itrOwnedShare.next();
                if(nextShareOwned.getUserNameOwned().equals(userLogInLabel.getText()) && nextShareOwned.getAmount() > 0)
                {
                    Share nextShare = new Share();
                    Iterator itrShare = shareObjects.iterator();

                    while(itrShare.hasNext()) {
                        nextShare = (Share) itrShare.next();
                        if(nextShare.getCompanySymbol().equals(nextShareOwned.getShareSymbol()))
                        {
                            int percentageChange = calculatePercentageChange(nextShare.getSharePrice().getValue(), nextShareOwned.getBoughtFor());
                            
                            //Change the colour of text depending if the percentage change is positive or negative
                            if(Double.toString(percentageChange).contains("-"))
                            {
                                text = text + "<b>Share: </b>" + nextShareOwned.getShareSymbol() + "<b> Amount: </b>" + nextShareOwned.getAmount() + "<b> Price bought at: </b>" + nextShareOwned.getBoughtFor() + "<font color=\"red\">  " + percentageChange + "%</font><br>"; 
                            }
                            else if(percentageChange == 0)
                            {
                                text = text + "<b>Share: </b>" + nextShareOwned.getShareSymbol() + "<b> Amount: </b>" + nextShareOwned.getAmount() + "<b> Price bought at: </b>" + nextShareOwned.getBoughtFor() + "  " + percentageChange + "%<br>";
                            }
                            else
                            {
                                text = text + "<b>Share: </b>" + nextShareOwned.getShareSymbol() + "<b> Amount: </b>" + nextShareOwned.getAmount() + "<b> Price bought at: </b>" + nextShareOwned.getBoughtFor() + "<font color=\"green\">  " + percentageChange + "%</font><br>";
                      
                            }
                        }
                    }
                    
                    
                }
            }
            
            sharesOwnedEditorPane.setText(text);
            
        } catch (Exception ex) {
            System.out.println("Exception: " + ex);
        }
    }  
    
    //Fill user list on the admin page
    private void fillUserList()
    {
        DefaultListModel dlm = new DefaultListModel();
        try {
            User nextUser = new User();
            Iterator itr = userObjects.iterator();
            
            while(itr.hasNext()) {
                nextUser = (User) itr.next();

                if(adminLogInLabel.getText().equals(nextUser.getUserName()) )
                {
                    //Do not print Admin that is logged in
                }
                else if(nextUser.isIsAdmin() == true)
                {
                    dlm.addElement(nextUser.getUserName()+ " - Admin");
                }
                else
                {
                    dlm.addElement(nextUser.getUserName());
                }
            }     

        } catch (Exception ex) {
            System.out.println("Exception: " + ex);
        }
        
        userList.setModel(dlm); 
    }      
    
    //Fill the share list after converting the prices to the desired currency
    private void fillShareConvertedCurrencyList(String chosenCurrencySymbol)
    {
        DefaultListModel dlm = new DefaultListModel();
        try {
            Share nextShare = new Share();
            Iterator itr = shareObjects.iterator();
            
            while(itr.hasNext()) {
                nextShare = (Share) itr.next();

                double convertedCurrencyValue = convertCurrency(nextShare.getSharePrice().getCurrency(), chosenCurrencySymbol, nextShare.getSharePrice().getValue());
                
                dlm.addElement(nextShare.getCompanyName() + " @ " + nextShare.getCompanySymbol() + " @ " + " Price "+ chosenCurrencySymbol+ ": " + round(convertedCurrencyValue, 2));                
            }     

        } catch (Exception ex) {
            System.out.println("Exception: " + ex);
        }
        
        sharesList.setModel(dlm);                
    }
    
    //Fill the share list after the user has chosen what to search by
    private void fillSearchList(String searchString, JList list)
    {
        DefaultListModel dlm = new DefaultListModel();
        
        for (int i = 0; i < list.getModel().getSize(); i++) {
            
            String listItem = list.getModel().getElementAt(i).toString();
            
            String lowerCaseListItem = list.getModel().getElementAt(i).toString().toLowerCase();
            
            if(lowerCaseListItem.contains(searchString.toLowerCase()) == true)
            {
                dlm.addElement(listItem);
            }
        }
        
        list.setModel(dlm);                
    }
    
    //Fill share details are with the details of the selected share 
    private void fillShareDetailsTextArea(String companySymbol)
    {
        
        shareDetailsEditorPane.setContentType("text/html");        
        shareDetailsEditorPane.setText("");
        
        try {
            Share nextShare = new Share();
            Iterator itr = shareObjects.iterator();
            
            while(itr.hasNext()) {
                nextShare = (Share) itr.next();
                
                if(nextShare.getCompanySymbol().equals(companySymbol))
                {
                    String noZDate = nextShare.getPriceUpdated().toString().replaceAll("Z", "");
                    
                    shareDetailsEditorPane.setText("<b>Company name: </b>" + nextShare.getCompanyName()+ "<br>" + "<b>Amount of shares available: </b>" + nextShare.getAvailableShares() + "<br>" + "<b>Company Sector: </b>" + nextShare.getSector() + "<br>" + "<b>Last price update on: </b>" + noZDate);       
                } 
            }

        } catch (Exception ex) {
            System.out.println("Exception: " + ex);
        }
        
    }
    
    //Fill combo box with the available currencies 
    private void fillCurrencyComboBox()
    {        
        for(int i = 0; i < currencyList.size(); i++)
        {
            currencyComboBox.addItem(currencyList.get(i));
        }    
                                
    }
    
    //Converting a currency
    private double convertCurrency(String currencyCurrencySymbol, String newCurrecySymbol, double value)
    {
        double conversionRate = getConversionRate(currencyCurrencySymbol, newCurrecySymbol);
        double convertedCurrencyValue = conversionRate * value;
        
        return convertedCurrencyValue;
    }
    
    //Extract the share symbol from a string
    private String getShareSymbol(String originalValue)
    {
        int firstIndex = originalValue.indexOf('@');
        String symbolWithSpaces = originalValue.substring((firstIndex + 1), ((firstIndex + 1) + 5));
        String shareSymbol = symbolWithSpaces.replaceAll(" ", "");
                
        return shareSymbol;
    }     
    
    //Extract the share value from a string
    public double getShareValue()
    {
        Share nextShare = new Share();
        Iterator itrShare = shareObjects.iterator();
            while(itrShare.hasNext()) {
                nextShare = (Share) itrShare.next();
                if(nextShare.getCompanySymbol().equals(getShareSymbol(sharesList.getSelectedValue()))) {
                    break;
                }
            } 
           
        double shareValue = nextShare.getSharePrice().getValue();
                
        return shareValue;        
    }
           
    //Extract the currency symbol from a string
    private String getCurrencySymbol(String originalValue)
    {
        String currencySymbol = originalValue.substring(0, 3);
                
        return currencySymbol;
    }
    
    //Extract the admin name from the user list
    private String getAdminNameFromString(String originalValue)
    {
        int firstIndex = originalValue.indexOf('-');
        String name = originalValue.substring(0, (firstIndex - 1));
     
        return name;
    }
        
    //Order the list of shares depending on the filter that has been chosen
    private void setFilter()
    {
        if(filterComboBox.getSelectedItem() != "Price")
        {
            if(filterComboBox.getSelectedItem() == "Company Name")
            {      
                Collections.sort(shareObjects, new CompanyNameComparator());
            }
            else if(filterComboBox.getSelectedItem() == "Share Symbol")
            {      
                Collections.sort(shareObjects, new ShareSymbolComparator());
            }
            fillShareList(sharesList);
            
            //Convert updated price to the chosen currecy if any selected
            if(currencyComboBox.getSelectedItem() != "Default")
            {
                String currencySymbol = getCurrencySymbol(currencyComboBox.getSelectedItem().toString());
                fillShareConvertedCurrencyList(currencySymbol);
            }
        }
        else if(filterComboBox.getSelectedItem() == "Price")
        {
            HighFirstCheckBox.setEnabled(true);
            
            //Check if the currency has been changed
            if(currencyComboBox.getSelectedItem().equals("Default"))
            {
                if(HighFirstCheckBox.isSelected())
                {
                    Collections.sort(shareObjects, new PriceComparatorHighFirst());               
                }
                else
                {
                    Collections.sort(shareObjects, new PriceComparator());        
                }
            }
            else
            {
                //Extract the chosen currency symbol from the combo box string
                String currencySymbol = getCurrencySymbol(currencyComboBox.getSelectedItem().toString());            
                
                fillProgramShareListConvertedCurrency(currencySymbol);
                
                if(HighFirstCheckBox.isSelected())
                {
                    Collections.sort(shareObjects, new PriceComparatorHighFirst());               
                }
                else
                {
                    Collections.sort(shareObjects, new PriceComparator());        
                }
            }
            fillShareList(sharesList); 
            
            //Reading back the original share list from a file
            shareObjects = displayShares();
        }

    }       
    
    //Fill the internal share list with converted currency values
    private void fillProgramShareListConvertedCurrency(String currencySymbol)
    {
        //Changing the currency and the value in the list of shares
        try {
            Share nextShare = new Share();
            Iterator itr = shareObjects.iterator();

            while(itr.hasNext()) {
                nextShare = (Share) itr.next();

                double convertedCurrencyValue = convertCurrency(nextShare.getSharePrice().getCurrency(), currencySymbol, nextShare.getSharePrice().getValue());

                nextShare.getSharePrice().setValue(round(convertedCurrencyValue, 2));
                nextShare.getSharePrice().setCurrency(currencySymbol);
            }     

        } catch (Exception ex) {
            System.out.println("Exception: " + ex);
        }
    }
    
    //Update users owned shares record when he buys more shares
    private void updateOwnedSharesBuyClient(String shareSymbol, int amountOfShares, double sharePrice)
    {        
        sellBuyErrorLabel.setText("");
                
        User nextUser = new User();
        Iterator itrUser = userObjects.iterator();
            while(itrUser.hasNext()) {
                nextUser = (User) itrUser.next();
                if(nextUser.getUserName().equals(userLogInLabel.getText())) {
                    break;
                }
            }  
            
        Share nextShare = new Share();
        Iterator itrShare = shareObjects.iterator();
            while(itrShare.hasNext()) {
                nextShare = (Share) itrShare.next();
                if(nextShare.getCompanySymbol().equals(shareSymbol)) {
                    break;
                }
            }     
                        
        //Check if the user has enough money and if there are enough share to buy    
        if(nextShare.getAvailableShares() >= amountOfShares)
        {
            if(nextUser.getUserMoney().getValue() >= (sharePrice * amountOfShares))
            {
                //Call a web service to update the user owned shares and his amount of money
                updateOwnedSharesBuy(nextUser.getUserName(), shareSymbol, amountOfShares, sharePrice);

                userObjects = getUsers();
                sharesOwnedObjects = getOwnedShares();
                
                //Update user balance on GUI
                balanceLabel.setText("USD " + Double.toString((nextUser.getUserMoney().getValue() - (sharePrice * amountOfShares))));  

                fillSharesOwnedList();
            }
            else
            {
                sellBuyErrorLabel.setText("Error: Balance too small.");
            }
        }
        else
        {
            sellBuyErrorLabel.setText("Error: Not enough shares available.");
        }
        
    }
    
    //Update users owned shares record when he sells shares
    private void updateOwnedSharesSellClient(String shareSymbol, int amountOfShares, double sharePrice)
    {
        sellBuyErrorLabel.setText("");
                        
        boolean sharePresent = false;
        
        SharesOwned nextOwnedShare = new SharesOwned();
        Iterator itrShare = sharesOwnedObjects.iterator();
            while(itrShare.hasNext()) {
                nextOwnedShare = (SharesOwned) itrShare.next();
                if(nextOwnedShare.getShareSymbol().equals(shareSymbol) && nextOwnedShare.getUserNameOwned().equals(userLogInLabel.getText())) {
                    sharePresent = true;
                    break;
                }
            }             
       
        User nextUser = new User();
        Iterator itrUser = userObjects.iterator();
            while(itrUser.hasNext()) {
                nextUser = (User) itrUser.next();
                if(nextUser.getUserName().equals(userLogInLabel.getText())) {
                    break;
                }
            }  
            
        if(sharePresent)
        {
            if(nextOwnedShare.getAmount() >= amountOfShares)
            {
                //Call a web service to update the user owned shares and his amount of money
                updateOwnedSharesSell(nextUser.getUserName(), shareSymbol, amountOfShares, sharePrice);
                
                userObjects = getUsers();
                sharesOwnedObjects = getOwnedShares();

                //Update user balance
                balanceLabel.setText("USD " + Double.toString(nextUser.getUserMoney().getValue() + (sharePrice * amountOfShares)));
                
                //writeUserFile(userList);  

                fillSharesOwnedList();
            }
            else
            {
                sellBuyErrorLabel.setText("Error: Not enough shares to sell.");
            }
        }
        else
        {                
                sellBuyErrorLabel.setText("Error: You do not own these shares.");
        }   
    }
    
    //Calculating the percentage change to show the user if his investment went up or down in value
    private int calculatePercentageChange(double newValue, double originalValue)
    {
        double increase = newValue - originalValue;

        double percentageChange = (increase / originalValue) * 100;
        int percentageChangeInt = (int) percentageChange;
        
        return percentageChangeInt;
    }

    private void checkSearchFilterAndCurrency()
    {
        if(filterComboBox.getSelectedItem().equals("Default"))
        {
            if(currencyComboBox.getSelectedItem().equals("Default"))
            {
                fillShareList(sharesList);
            }
            else
            {
                String currencySymbol = getCurrencySymbol(currencyComboBox.getSelectedItem().toString());
                fillShareConvertedCurrencyList(currencySymbol);
            }
            HighFirstCheckBox.setEnabled(false);
        }
        else
        {
            setFilter();
        }            
        
    }
    
    
    public static double round(double value, int places) {
    if (places < 0) throw new IllegalArgumentException();

    BigDecimal bd = new BigDecimal(value);
    bd = bd.setScale(places, RoundingMode.HALF_UP);
    return bd.doubleValue();
    }

}

//The following comparator code was taken from this website https://dzone.com/articles/comparators-in-more-functional-way
class CompanyNameComparator implements Comparator<Share> {
@Override
    public int compare(Share o1, Share o2) {
        String companyNameSymbol1 = o1.getCompanyName();

        String companyNameSymbol2 = o2.getCompanyName();

        return companyNameSymbol1.compareTo(companyNameSymbol2);
    }
}

class ShareSymbolComparator implements Comparator<Share> {
@Override
    public int compare(Share o1, Share o2) {
        String shareSymbol1 = o1.getCompanySymbol();

        String shareSymbol2 = o2.getCompanySymbol();

        return shareSymbol1.compareTo(shareSymbol2);
    }
}

class PriceComparator implements Comparator<Share> {
@Override
    public int compare(Share o1, Share o2) {
        
        SharePrice price1 = o1.getSharePrice();

        SharePrice price2 = o2.getSharePrice();

        return Double.compare(price1.getValue(), price2.getValue());
    }
}

class PriceComparatorHighFirst implements Comparator<Share> {
  @Override
      public int compare(Share o1, Share o2) {
          SharePrice price1 = o1.getSharePrice();

          SharePrice price2 = o2.getSharePrice();

          return Double.compare(price2.getValue(), price1.getValue());
      }
  }
